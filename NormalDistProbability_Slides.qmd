---
title: "Probability and the Normal Distribution"
author: Dr. Gilbert
format: revealjs
date: today
date-format: long
theme: serif
incremental: true
fontsize: 20pt
---

```{r global-options, include=FALSE}
library(tidyverse)
library(tidymodels)
library(patchwork)
library(countdown)

options(kable_styling_bootstrap_options = c("hover", "striped"))

theme_set(theme_bw(base_size = 32))
```

```{css}
code.sourceCode {
  font-size: 1.3em;
  /* or try font-size: xx-large; */
}
```

## The Highlights

+ The Normal Distribution  
  + Examples of Normal Distributions
  + Center (mean: $\mu$)
  + Spread (standard deviation: $\sigma$)
+ Probabilities and the Normal Distribution (areas) 
  + Visual Representations of Probabilities
  + Normal Distribution is Symmetric
  + Why the Probability of an Exact, Singular Outcome is 0
+ **Examples:** Normal, Binomial, or Neither
+ Review of R functionality for probabilities and percentiles/quantiles with the Normal Distribution  
  + `pnorm()` 
  + `qnorm()`
+ **Examples:** Working with the Normal Distribution

## The Normal Distribution

. . .

::::{.columns}

:::{.column width="25%"}

:::

:::{.column width="50%"}

```{r}
x <- seq(-3.5, 3.5, length.out = 500)

ggplot() + 
  geom_line(aes(x = x, y = dnorm(x)),
            color = "black",
            lwd = 1.5) + 
  labs(
    title = "A Normal Distribution",
    x = "x",
    y = ""
  )
```

:::

:::{.column width="25%"}

:::

::::

. . . 

A normal distribution is a bell-shaped distribution which is parameterized (determined) by a mean $\mu$ and standard deviation $\sigma$

. . . 

The normal distribution with mean $\mu$ and standard deviation $\sigma$ is denoted by $N\left(\mu,~\sigma\right)$ and has probability density function

. . .

$$p\left(x\right) = \frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{\left(x - \mu\right)^2}{2\sigma^2}}$$

. . .

Luckily, like the binomial distribution, we don't evaluate or work with this distribution by hand either!

## Examples of Normal Distributions

::::{.columns}

:::{.column width="25%"}

:::

:::{.column width="50%"}

```{r}
mu1 <- 0
sigma1 <- 1
mu2 <- 1
sigma2 <- 0.3
mu3 <- -1
sigma3 <- 2

x1 <- seq(-8, 6, length.out = 1000)
x2 <- seq(-8, 6, length.out = 1000)
x3 <- seq(-8, 6, length.out = 500)

ggplot() + 
  geom_line(aes(x = x1, y = dnorm(x1, mu1, sigma1)),
            color = "black",
            lwd = 1.5,
            alpha = 0.75) +
  geom_line(aes(x = x2, y = dnorm(x2, mu2, sigma2)),
            color = "purple",
            lwd = 1.5,
            alpha = 0.75) +
  geom_line(aes(x = x3, y = dnorm(x3, mu3, sigma3)),
            color = "darkgreen",
            lwd = 1.5,
            alpha = 0.75) + 
  labs(
    title = "Three Normal Distributions",
    x = "x",
    y = ""
  )
```

:::

:::{.column width="25%"}

:::

::::

. . .

The **black** distribution has $\mu = 0$ and $\sigma = 1$

. . .

The **<font color=purple>purple</font>** distribution has $\mu = 1$ and $\sigma = 0.3$

. . . 

The **<font color=green>green</font>** distribution has $\mu = -1$ and $\sigma = 2$

. . .

::::{.columns}

:::{.column width="40%"}

```{r}
ggplot() + 
  geom_line(aes(x = x, y = dnorm(x)),
            lwd = 1.5) + 
  labs(
    title = "The Standard Normal Distribution",
    x = "Z",
    y = ""
  )
```

:::

:::{.column width="60%"}

The **black** distribution, $N\left(\mu = 0,~\sigma = 1\right)$, is a special distribution called the *standard normal distribution* and we often use $z$ to denote its "support" values.

We'll encounter this distribution quite often throughout our course.

:::

::::

## The Center of the Normal Distribution

. . . 

All of the distributions below have standard deviation $\sigma = 2$ but they have different means ($\mu$)

. . . 

::::{.columns}

:::{.column width="25%"}

:::

:::{.column width="50%"}

```{r}
x1 <- seq(-10, 10, length.out = 1000)
mu1 <- 0
mu2 <- 2
mu3 <- -7

ggplot() + 
  geom_point(aes(x = x1, y = dnorm(x1, mean = mu1, sd = 1)),
             color = "purple") + 
  geom_point(aes(x = x1, y = dnorm(x1, mean = mu2, sd = 1)),
             color = "darkgreen") + 
  geom_point(aes(x = x1, y = dnorm(x1, mean = mu3, sd = 1)),
             color = "orange") + 
  labs(
    subtitle = "Normal Distributions with Different Means",
    x = "x",
    y = ""
  )
```

:::

:::{.column width="25%"}

:::

::::

+ The mean of the **<font color=purple>purple</font>** distribution is $\mu = 0$
+ The mean of the **<font color=green>green</font>** distribution is $\mu = 2$
+ The mean of the **<font color=orange>orange</font>** distribution is $\mu = -7$

. . . 

**Note:** All three distributions have the same shape, but are shifted so that their peak is at their mean.

## The Spread of the Normal Distribution

. . . 

All of the distributions below have mean $\mu = 0$ but they have different standard deviations ($\sigma$)

. . . 

::::{.columns}

:::{.column width="25%"}

:::

:::{.column width="50%"}

```{r}
x1 <- seq(-15, 15, length.out = 1000)
sd1 <- 1.5
sd2 <- 3
sd3 <- 5

ggplot() + 
  geom_point(aes(x = x1, y = dnorm(x1, mean = 0, sd = sd1)),
             color = "purple") + 
  geom_point(aes(x = x1, y = dnorm(x1, mean = 0, sd = sd2)),
             color = "darkgreen") + 
  geom_point(aes(x = x1, y = dnorm(x1, mean = 0, sd = sd3)),
             color = "orange") + 
  labs(
    subtitle = "Normals with Different Standard Deviations",
    x = "x",
    y = ""
  )
```

:::

:::{.column width="25%"}

:::

::::

+ The standard deviation of the **<font color=purple>purple</font>** distribution is $\sigma = 1.5$
+ The standard deviation of the **<font color=green>green</font>** distribution is $\sigma = 3$
+ The standard deviation of the **<font color=orange>orange</font>** distribution is $\sigma = 5$

. . . 

**Note:** All of these distributions have the same center, but their width (and height too) change depending on their standard deviation.

## Probabilities and the Normal Distribution

. . . 

::::{.columns}

:::{.column width="60%"}

Probabilities of outcomes from random variables described by a normal distribution are *areas* under the corresponding normal curve.

The picture to the right shows $\mathbb{P}\left[X \geq k\right]$

:::

:::{.column width="40%"}

```{r}
x <- seq(-3.5, 3.5, length.out = 1000)
x_fill <- seq(1, 3.5, length.out = 500)


ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill)),
              fill = "purple",
              alpha = 0.5) + 
  geom_line(aes(x = x, y = dnorm(x)),
            lwd = 1.5) + 
  scale_x_continuous(breaks = c(0, 1), labels = c("μ", "k")) +
  labs(
    x = "X",
    y = ""
  )

```

:::

::::

. . . 

**Note:** It is also worth knowing that the Normal Distribution is *symmetric*

::::{.columns}

:::{.column width="45%"}

```{r}
x <- seq(-3.5, 3.5, length.out = 1000)
x_fill <- seq(-3.5, -1, length.out = 500)


ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill)),
              fill = "purple",
              alpha = 0.5) + 
  geom_line(aes(x = x, y = dnorm(x)),
            lwd = 1.5) + 
  scale_x_continuous(breaks = c(-1, 0), labels = c("μ-k", "μ")) +
  labs(
    title = "P[X < μ - k]",
    x = "X",
    y = ""
  )

```

:::

:::{.column width="10%"}

<br/> <br/> is the same as... 

:::

:::{.column width="45%"}

```{r}
x <- seq(-3.5, 3.5, length.out = 1000)
x_fill <- seq(1, 3.5, length.out = 500)


ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill)),
              fill = "purple",
              alpha = 0.5) + 
  geom_line(aes(x = x, y = dnorm(x)),
            lwd = 1.5) + 
  scale_x_continuous(breaks = c(0, 1), labels = c("μ", "μ + k")) +
  labs(
    title = "P[X > μ + k]",
    x = "X",
    y = ""
  )

```

:::

::::

. . . 

**Note:** If $\mu = 0$, then this relationship simplifies to $\mathbb{P}\left[X < -k\right] = \mathbb{P}\left[X > k\right]$ -- but be careful, this is *only* true when $\mu = 0$.

## Probability of an Exact, Singular Outcome is 0

. . . 

**Question:** What is the probability that a randomly selected adult male from the United States is exactly 72 inches (6 feet) tall?

. . .

::::{.columns}

:::{.column width="50%}

```{r}
mu <- 69
sigma <- 3

heights <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

ggplot() +
  geom_ribbon(aes(x = c(71.95, 72, 72.05),
                  ymin = 0,
                  ymax = dnorm(c(71.95, 72, 72.05), mean = mu, sd = sigma)),
              fill = "purple") + 
  geom_line(aes(x = heights,
                y = dnorm(heights, mean = mu, sd = sigma)),
            lwd = 1.5) +
  labs(
    x = "Height (in.)",
    y = ""
  )
```

:::

:::{.column width="50%"}

Since probabilities are areas under the curve and we can approximate this region by a rectangle, we can use the formula for the area of a rectangle to approximate this probability! What's the area of a rectangle with 0 width?

:::

::::

. . . 

**Note:** For this reason, $\mathbb{P}\left[X \leq k\right] = \mathbb{P}\left[X < k\right]$ and $\mathbb{P}\left[X \geq k\right] = \mathbb{P}\left[X > k\right]$.

. . . 

If we want to estimate probabilities, we'll need to ask questions about ranges of values.

1. What is the probability that an adult male in the US is less than 72 inches tall?
2. ...at least 72 inches tall?
3. ...between 71.5 and 72.5 inches tall?

## Normal, Binomial, or Neither

. . . 

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

. . .

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** You roll a fair six-sided die repeatedly until a six appears, and you want to know how many rolls it takes.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** A factory has a 2% defect rate. Each day, 200 items are produced, and the number of defective items is counted.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** The weight of apples grown in an orchard is approximately normally distributed with a mean of 150 grams and a standard deviation of 20 grams.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** A region typically experiences 5 minor earthquakes per year. You are interested in the number of earthquakes in the next year.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** The number of cars passing through a toll booth in a 10-minute period is recorded. On average, 50 cars pass through every 10 minutes.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** The lifespan of a certain smartphone battery is approximately normally distributed with a mean of 18 months and a standard deviation of 3 months.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** A teacher gives a test to 30 students and knows that 80% of the students usually pass. The teacher is interested in the number of students who will pass this time.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** The time until a particular brand of light bulb fails is recorded. The failure times do not follow a normal pattern but tend to follow a long-tailed distribution.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** In a survey, you ask 200 randomly selected people whether they plan to vote in an upcoming election. Historically, 55% of people vote.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** The daily temperature in a city during the summer months is approximately normally distributed with a mean of 85°F and a standard deviation of 5°F.

## Normal, Binomial, or Neither

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** A social media influencer posts a new photo, and the number of likes received over the next 24 hours is recorded. The number of likes does not seem to follow any regular or predictable pattern.

## Normal, Binomial, or Neither?

Determine whether each of the following scenarios involve a *random variable* that can be modeled by a normal distribution or not.

**Scenario:** The distance run by professional athletes in a 30-minute endurance test is normally distributed with a mean of 5 kilometers and a standard deviation of 0.3 kilometers.

## Review of R Functionality for the Normal Distribution (Finding Probabilities; `pnorm()`)

. . . 

Assume that $X\sim N\left(\mu = \text{mu}, \sigma = \text{sigma}\right)$. 

. . .

That is, the random variable $X$ is *normally distributed with mean $\text{mu}$ and standard deviation $\text{sigma}$*.

. . .

Since $\mathbb{P}\left[X = k\right] = 0$ (that is, *the probability that the random variable $X$ takes on the value $k$ exactly, is 0*), we will **not** make use of any `dnorm()` function

. . . 

::::{.columns}

:::{.column width="60%"}

The probability that $X$ takes on a value *less than or equal to* (or just *less than*) $k$ is $\mathbb{P}\left[X \leq k\right] \approx$ `pnorm(k, mean = mu, sd = sigma)`

:::

:::{.column width="40%"}

```{r}
x <- seq(-3.5, 3.5, length.out = 1000)
x_fill <- seq(-3.5, 1.25, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill)),
              fill = "purple",
              alpha = 0.5) + 
  geom_line(aes(x = x, y = dnorm(x)),
            lwd = 1.5) + 
  geom_text(aes(x = -0.2, y = 0.15, label = "?"), size = 18) + 
  scale_x_continuous(breaks = c(-2, 0, 1.25, 2), labels = c(-2, 0, "k", 2)) + 
  labs(
    x = "X",
    y = ""
  )
```

:::

::::

. . . 

In cases where we want to find $\mathbb{P}\left[x \geq k\right]$, $\mathbb{P}\left[k_1 \leq X\leq k_2\right]$, and others, we'll need to...

. . . 

**Strategy:** Draw a picture and let your picture tell you how to use `pnorm()`

## Review of R Functionality for the Normal Distribution (Finding Percentiles; `qnorm()`)

Assume that $X\sim N\left(\mu = \text{mu}, \sigma = \text{sigma}\right)$. 

That is, the random variable $X$ is *normally distributed with mean $\text{mu}$ and standard deviation $\text{sigma}$*.

. . . 

In addition to computing probabilities, we can compute percentiles/quantiles (cut-off or boundary values)

. . . 

::::{.columns}

:::{.column width="55%"}

The boundary value $k^*$ such that $\mathbb{P}\left[X \leq k^*\right] = p$ is given by <br/> `qnorm(p, mean = mu, sd = sigma)`

**Note:** $p$ must be the area to the LEFT of the boundary value your are looking for

:::

:::{.column width="45%"}

```{r}
x <- seq(-3.5, 3.5, length.out = 1000)
x_fill <- seq(-3.5, 0.5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill)),
              fill = "purple",
              alpha = 0.5) + 
  geom_line(aes(x = x, y = dnorm(x)),
            lwd = 1.5) + 
  geom_text(aes(x = -0.4, y = 0.15, label = "p"), size = 16) + 
  scale_x_continuous(breaks = c(-2, 0, 0.5, 2), labels = c(-2, 0, "?", 2)) +
  labs(
    x = "X",
    y = ""
  )
```

:::

::::

## Before We Try, Some Advice

1. Don't "memorize" anything beyond...  
    + the normal distribution is bell-shaped and centered at its mean
    + use `pnorm()` if you have a boundary value(s) and need *to find a probability*
    + use `qnorm()` if you have a probability/area and need *to find a boundary value*
2. Draw a picture!
3. Estimate your answer before computing it  
    + If it is a probability, is it more or less than 0.5?
    + If it is a boundary value, should it be more than the average or less?
4. Use your picture to guide your strategy for finding the answer
5. Check your answer against your estimate/expectation

## Examples: Working with the Normal Distribution

. . . 

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

+ What is the probability that a randomly selected runner finishes the marathon in less than 4 hours?

. . . 

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(mu - 3.5*sigma, 4, length.out = 500)

ggplot() + 
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon in less than 4 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(mu - 3.5*sigma, 4, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 4),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon in less than 4 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(mu - 3.5*sigma, 4, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 4),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

How big should our answer be?

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon in less than 4 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(mu - 3.5*sigma, 4, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 4),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

We're looking for a probability and it should be less than 0.5

:::

::::

. . . 

Since we have our boundary value and we are looking for a probability, let's use `pnorm()`

. . . 

::::{.columns}

:::{.column width="50%"}

```{r}
#| echo: true
#| eval: false

pnorm(4, 4.5, 0.75)
```

:::

:::{.column width="50%"}

```{r}
#| echo: false
#| eval: true

pnorm(4, 4.5, 0.75)
```

:::

::::

. . . 

**Answer:** There is about a 25.25% chance that a randomly selected marathon runner finished the marathon in under 4 hours.

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

+ What is the probability that a randomly selected runner finishes the marathon in 3 and a half hours or more?

. . . 

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3.5, mu + 3.5*sigma, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3.5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon in 3 and a half hours or more?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3.5, mu + 3.5*sigma, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3.5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

How big should our answer be?

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon in 3 and a half hours or more?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3.5, mu + 3.5*sigma, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3.5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )

```

:::

:::{.column width="60%"}

We're looking for a probability and it should be more than 0.5.

:::

::::

. . .

Since we have our boundary value and we are looking for a probability, let's use `pnorm()`

. . .

::::{.columns}

:::{.column width="50%"}

```{r}
#| echo: true
#| eval: false

1 - pnorm(3.5, 4.5, 0.75)

```

:::

:::{.column width="50%"}

```{r}
#| echo: false
#| eval: true

1 - pnorm(3.5, 4.5, 0.75)
```

:::

::::

. . .

**Answer:** There is about a 90.88% chance that a randomly selected marathon runner finished the marathon in 3 and a half hours or more.

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

+ What is the probability that a randomly selected runner finishes the marathon between 3 hours and 5 hours?

. . . 

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon between 3 hours and 5 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

How big should our answer be?

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon between 3 hours and 5 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

It's tough to tell, but something near 0.5 seems reasonable -- nothing too close to 0 or too close to 1 should be expected.

:::

::::

. . . 

Since we have our boundary values, let's use `pnorm()` to find probability.

. . . 

But How?

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon between 3 hours and 5 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

It's tough to tell, but something near 0.5 seems reasonable -- nothing too close to 0 or too close to 1 should be expected.

:::

::::

Since we have our boundary values, let's use `pnorm()` to find probability.

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

x_big <- seq(mu - 3.5*sigma, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_ribbon(aes(x = x_big, ymin = 0, ymax = dnorm(x_big, mean = mu, sd = sigma)),
              fill = "darkgreen",
              alpha = 0.9) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    subtitle = "pnorm(5, 4.5, 0.75) is Too Big!",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="20%"}

:::

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

x_big <- seq(mu - 3.5*sigma, 5, length.out = 500)
x_small <- seq(mu - 3.5*sigma, 3, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_ribbon(aes(x = x_small, ymin = 0, ymax = dnorm(x_small, mean = mu, sd = sigma)),
              fill = "red",
              alpha = 0.9) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    subtitle = "pnorm(3, 4.5, 0.75), We Don't Want That!",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon between 3 hours and 5 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

It's tough to tell, but something near 0.5 seems reasonable -- nothing too close to 0 or too close to 1 should be expected.

:::

::::

Since we have our boundary values, let's use `pnorm()` to find probability.

::::{.columns}

:::{.column width="30%"}

:::

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

x_big <- seq(mu - 3.5*sigma, 5, length.out = 500)
x_small <- seq(mu - 3.5*sigma, 3, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_ribbon(aes(x = x_big, ymin = 0, ymax = dnorm(x_big, mean = mu, sd = sigma)),
              fill = "darkgreen",
              alpha = 0.9) +
  geom_ribbon(aes(x = x_small, ymin = 0, ymax = dnorm(x_small, mean = mu, sd = sigma)),
              fill = "red",
              alpha = 0.9) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    subtitle = "Green minus Red is Purple!",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="30%"}

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ What is the probability that a randomly selected runner finishes the marathon between 3 hours and 5 hours?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

It's tough to tell, but something near 0.5 seems reasonable -- nothing too close to 0 or too close to 1 should be expected.

:::

::::

Since we have our boundary values, let's use `pnorm()` to find probability.

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

x_fill <- seq(3, 5, length.out = 500)

x_big <- seq(mu - 3.5*sigma, 5, length.out = 500)
x_small <- seq(mu - 3.5*sigma, 3, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mean = mu, sd = sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_ribbon(aes(x = x_big, ymin = 0, ymax = dnorm(x_big, mean = mu, sd = sigma)),
              fill = "darkgreen",
              alpha = 0.9) +
  geom_ribbon(aes(x = x_small, ymin = 0, ymax = dnorm(x_small, mean = mu, sd = sigma)),
              fill = "red",
              alpha = 0.9) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  geom_vline(aes(xintercept = 3),
             linetype = "dashed") + 
  geom_vline(aes(xintercept = 5),
             linetype = "dashed") + 
  labs(
    subtitle = "Green minus Red is Purple!",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

```{r}
#| echo: true
#| eval: true

pnorm(5, 4.5, 0.75) - pnorm(3, 4.5, 0.75)
```

**Answer:** There is about a 72.48% chance that a randomly selected marathon runner finished the marathon between 3 and 5 hours.

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

+ At what finishing time do the slowest 20% of runners finish the marathon?

. . . 

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

ggplot() + 
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

Where are the slowest 20% of runners on this distribution?

:::

::::

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ At what finishing time do the slowest 20% of runners finish the marathon?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

slow_20 <- qnorm(0.8, mu, sigma)
x_fill <- seq(slow_20, mu + 3.5*sigma, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mu, sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

Where are the slowest 20% of runners on this distribution?

There they are! They have the longest finishing times. How long should we expect?

:::

::::

. . . 

This time, we know the size of that purple area and we are trying to find the *boundary value* between it and the unshaded portion of the distribution

. . . 

This will be the minimum finishing time for falling into the slowest 20% of runners

. . . 

We should use `qnorm()` in this scenario

## Examples: Working with the Normal Distribution

**Scenario:** The time it takes runners to complete a marathon is approximately normally distributed with a mean of 4.5 hours and a standard deviation of 0.75 hours.

:::{.nonincremental}

+ At what finishing time do the slowest 20% of runners finish the marathon?

:::

::::{.columns}

:::{.column width="40%"}

```{r}
mu <- 4.5
sigma <- 0.75
x <- seq(mu - 3.5*sigma, mu + 3.5*sigma, length.out = 1000)

slow_20 <- qnorm(0.8, mu, sigma)
x_fill <- seq(mu - 3.5*sigma, slow_20, length.out = 500)

ggplot() + 
  geom_ribbon(aes(x = x_fill, ymin = 0, ymax = dnorm(x_fill, mu, sigma)),
              fill = "purple",
              alpha = 0.5) +
  geom_line(aes(x = x, y = dnorm(x, mean = mu, sd = sigma)),
            lwd = 1.5) + 
  labs(
    title = "Distribution of Marathon Times",
    x = "Finishing Times (hours)",
    y = ""
  )
```

:::

:::{.column width="60%"}

Where are the slowest 20% of runners on this distribution?

There they are! They have the longest finishing times. How long should we expect?

`qnorm()` requires the area to the left of the boundary value. How big is that area?

:::

::::

. . . 

::::{.columns}

:::{.column width="40%"}

```{r}
#| echo: true
#| eval: true

qnorm(0.80, 4.5, 0.75)
```

:::

:::{.column width="60%"}

**Answer:** The slowest 20% of runners finish in about 5.13 hours (almost 5 hours and 8 minutes) or longer.

:::

::::

## Examples: Working with the Normal (*or* Binomial?) Distributions

. . . 

Complete the following examples, but be careful -- you'll need to decide whether to use the binomial distribution (and `dbinom()` or `pbinom()`) or the normal distribution (and `pnorm()` or `qnorm()`)

. . . 

**Scenario:** The weight of apples grown in an orchard is approximately normally distributed with a mean of 150 grams and a standard deviation of 20 grams.

+ What is the probability that a randomly selected apple weighs less than 100 grams?
+ What is the probability that a randomly selected apple weighs more that 175 grams?
+ What is the probability that a randomly selected apple weighs between 160 and 195 grams?
+ What is the cutoff for the lightest 5% of apples?
+ What is the cutoff for the heaviest 1% of apples?

## Examples: Working with the Normal (*or* Binomial?) Distributions

**Scenario:** In a survey, you ask 200 randomly selected people whether they plan to vote in an upcoming election. Historically, 55% of people vote.

+ What is the probability that fewer than 85 people are planning on voting?
+ What is the probability that at least 125 people are planning on voting?

## Examples: Working with the Normal (*or* Binomial?) Distributions

**Scenario:** The lifespan of a certain smartphone battery is approximately normally distributed with a mean of 18 months and a standard deviation of 3 months.

+ What is the probability that a battery has a lifespan exceeding 2 years (24 months)?
+ What is the probability that a battery has a lifespan between 16 months and 2 years?
+ The manufacturer wants to put a warranty on their batteries, but they want to replace no more than 3% of batteries via warranty. What is the cutoff for the lifespan of these shortest lasting batteries?

## Examples: Working with the Normal (*or* Binomial?) Distributions

**Scenario:** The daily temperature in a city during the summer months is approximately normally distributed with a mean of 85°F and a standard deviation of 5°F.

+ What is the probability of the temperature being below 65°F?
+ What is the probability of the temperature being above 93°F?
+ What is the probability of the temperature being between 75°F and 83°F?
+ What is the cutoff for the warmest 5% of days?

## Next Time...

<center><br/> Discrete Probability and Simulation Lab</center>



